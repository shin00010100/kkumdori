package com.kkumdori.shop.login;

import java.security.Key;
import java.util.Date;

import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class JwtTokenUtil {

    @Value("${jwt.secret}")
    private String secretKey;

    @Value("${jwt.expiration}")
    private long expirationTime;

    // JWT 토큰 생성 (role을 포함)
    public String generateToken(String username, String role) {
        // SecretKey 생성
        Key key = new SecretKeySpec(secretKey.getBytes(), SignatureAlgorithm.HS512.getJcaName());

        return Jwts.builder()
                .setSubject(username)  // 사용자 이름
                .claim("role", role)   // role을 클레임에 추가
                .setIssuedAt(new Date())  // 발행 시간
                .setExpiration(new Date(System.currentTimeMillis() + expirationTime))  // 만료 시간 설정
                .signWith(key, SignatureAlgorithm.HS512)  // SecretKey와 SignatureAlgorithm을 사용하여 서명
                .compact();  // 토큰 생성
    }

    // JWT 토큰에서 사용자 이름(Subject) 추출
    public String getUsernameFromToken(String token) {
        JwtParser parser = Jwts.parserBuilder()
                .setSigningKey(secretKey.getBytes())  // 새로운 API 방식으로 서명키 설정
                .build();
        return parser.parseClaimsJws(token).getBody().getSubject();
    }

    // JWT 토큰에서 role 추출
    public String getRoleFromToken(String token) {
        JwtParser parser = Jwts.parserBuilder()
                .setSigningKey(secretKey.getBytes())  // 새로운 API 방식으로 서명키 설정
                .build();
        return parser.parseClaimsJws(token).getBody().get("role", String.class);  // "role" 클레임에서 값 추출
    }

    // JWT 토큰의 만료 여부 확인
    public boolean isTokenExpired(String token) {
        JwtParser parser = Jwts.parserBuilder()
                .setSigningKey(secretKey.getBytes())  // 새로운 API 방식으로 서명키 설정
                .build();
        Date expiration = parser.parseClaimsJws(token).getBody().getExpiration();
        return expiration.before(new Date());
    }

    // JWT 토큰 검증
    public boolean validateToken(String token, String username) {
        return (username.equals(getUsernameFromToken(token)) && !isTokenExpired(token));
    }
}
