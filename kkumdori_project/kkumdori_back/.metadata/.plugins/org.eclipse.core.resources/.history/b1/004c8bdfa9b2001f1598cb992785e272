package com.kkumdori.shop.login;

import java.util.Arrays;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
public class SecurityConfig {
	
	 @Bean
	     PasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }
	
    // CORS 설정
    @Bean
    CorsConfigurationSource corsConfigurationSource() {  // Remove `public` modifier
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000")); // React 앱이 실행되는 주소
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS")); // 허용할 HTTP 메소드
        configuration.setAllowedHeaders(Arrays.asList("*")); // 모든 헤더 허용
        configuration.setAllowCredentials(true); // 쿠키를 포함한 요청 허용
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration); // 모든 경로에 대해 CORS 설정
        return source;
    }

    // HTTP 보안 설정 (Spring Security 6.x 버전의 Lambda DSL 사용)
    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {  // Remove `public` modifier
        http
            .csrf(csrf -> csrf.disable()) // CSRF 비활성화 (API에서 사용하는 경우)
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/login", "/api/auth/signup","/api/auth/check-username","/api/auth/IDsendVerificationCode","/api/auth/IDcheckEmailVerificationCode","/api/auth/PWsendVerificationCode","/api/auth/resetPassword").permitAll() // 로그인과 회원가입은 모두 허용
                .anyRequest().authenticated() // 그 외 요청은 인증 필요
            )
            .cors(cors -> cors.configurationSource(corsConfigurationSource())); // CORS 설정 활성화
        
        return http.build();
    }
}
